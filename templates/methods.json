{
    "Subsystem": {
        "Drivetrain": {
            "DifferentialDrive": {
                "ArcadeDrive": {
                    "header": "void drive(double iSpeed, double iRotation);",
                    "source": "void [CLASSNAME]::drive(double iSpeed, double iRotation) {\n  mDrive.ArcadeDrive(iSpeed, iRotation);\n}"
                },

                "TankDrive": {
                    "header": "void drive(double iLeftSpeed, double iRightSpeed);",
                    "source": "void [CLASSNAME]::drive(double iLeftSpeed, double iRightSpeed) {\n  mDrive.TankDrive(iLeftSpeed, iRightSpeed);\n}"
                }
            },

            "MecanumDrive": {
                "header": "void drive(double iXSpeed, double iYSpeed, double iRotation, const frc::Rotation2d iRotation2d = 0_rad);",
                "source": "void [CLASSNAME]::drive(double iXSpeed, double iYSpeed, double iRotation, const frc::Rotation2d iRotation2d) {\n  mDrive.DriveCartesian(iXSpeed, iYSpeed, iRotation, iRotation2d);\n}"
            }
        },

        "Elevator": {
            "header": "void move(double iSpeed);\n  void stop();",
            "source": {
                "OneController": "void [CLASSNAME]::move(double iSpeed) {\n  mElevatorMotor.Set(iSpeed);\n}\n\n  void [CLASSNAME]::stop() {\n  mElevatorMotor.Set(0);\n}",
                "TwoControllers": "void [CLASSNAME]::move(double iSpeed) {\n  mElevatorLeft.Set(iSpeed);\n  mElevatorRight.Set(-iSpeed);\n}\n\n  void [CLASSNAME]::stop() {\n  mElevatorLeft.Set(0);\n  mElevatorRight.Set(0);\n}"
            }
        },

        "Intake": {
            "header": "void start();\n  void stop();\n  void reverse();",
            "source": {
                "OneController": "void [CLASSNAME]::start() {\n  if (!kInverted)\n  {\n    mIntakeMotor.Set(kSpeed);\n  }\n\n else\n  {\n     mIntakeMotor.Set(-kSpeed);\n  }\n}\n\nvoid [CLASSNAME]::stop() {\n  mIntakeMotor.Set(0);\n}\n\nvoid [CLASSNAME]::reverse() {\n  kInverted = !kInverted;\n}",
                "TwoControllers": "void [CLASSNAME]::start() {\n  if (!kInverted)\n  {\n    mIntakeLeft.Set(kSpeed);\nmIntakeRight.Set(-kSpeed);\n  }\n\n else\n  {\n     mIntakeLeft.Set(-kSpeed);\nmIntakeRight.Set(kSpeed);\n  }\n}\n\nvoid [CLASSNAME]::stop() {\n  mIntakeLeft.Set(0);\n  mIntakeRight.Set(0);\n}\n\nvoid [CLASSNAME]::reverse() {\n  kInverted = !kInverted;\n}"
            }
        },

        "IMU": {
            "header": "void reset();\n  double getAngleYaw();\n  frc::Rotation2d getRotation2d();",
            "source": "void SubIMU::reset() {\n  mIMU.Reset();\n}\n\ndouble SubIMU::getAngleYaw() {\n  return mIMU.GetYaw();\n}\n\nfrc::Rotation2d SubIMU::getRotation2d() {\n  return frc::Rotation2d();\n}"
        }
    },
    
    "Command": {
        "Forward": {
            "Execute": {
                "TankDrive": "mDrivetrain.drive(0.3, 0.3);\n",
                "ArcadeDrive": "mDrivetrain.drive(0.3, 0);\n",
                "MecanumDrive": "mDrivetrain.drive(0.3, 0.3, 0, 0_rad);",
                "SwerveDrive": "mDrivetrain.drive(0.3, 0.3, 0);"
            },

            "End": {
                "TankDrive": "mDrivetrain.drive(0, 0);\n",
                "ArcadeDrive": "mDrivetrain.drive(0, 0);\n",
                "MecanumDrive": "mDrivetrain.drive(0, 0, 0, 0_rad);",
                "SwerveDrive": "mDrivetrain.drive(0, 0, 0);"
            }
        }
    }
}